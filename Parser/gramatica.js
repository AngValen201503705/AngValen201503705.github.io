// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/

import Aritmetica from "../Expressions/Aritmetica.js";
import Logica from "../Expressions/Logica.js";
import Relacional from "../Expressions/Relacional.js";
import Nativo from "../Expressions/Nativo.js";
import Type from "../Symbols/Type.js";
import Declaracion from "../Instructions/Declaracion.js";
import Asignacion from "../Instructions/Asignacion.js";
import Imprimir from "../Instructions/Imprimir.js";
import Modificador from "../Instructions/Modificador.js";
import Funcion from "../Instructions/Funcion.js";
import Symbol from "../Symbols/Symbol.js";
import Para from "../Instructions/Para.js";
import Mientras from "../Instructions/Mientras.js";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { S: peg$parseS };
  var peg$startRuleFunction = peg$parseS;

  var peg$c0 = ",";
  var peg$c1 = "(";
  var peg$c2 = ");";
  var peg$c3 = "=";
  var peg$c4 = ";";
  var peg$c5 = ")";
  var peg$c6 = "{";
  var peg$c7 = "}";
  var peg$c8 = "if";
  var peg$c9 = "else";
  var peg$c10 = "&&";
  var peg$c11 = "||";
  var peg$c12 = ">=";
  var peg$c13 = "<=";
  var peg$c14 = "==";
  var peg$c15 = "!=";
  var peg$c16 = "-";
  var peg$c17 = "int";
  var peg$c18 = "float";
  var peg$c19 = "string";
  var peg$c20 = "boolean";
  var peg$c21 = "char";
  var peg$c22 = "!";
  var peg$c23 = "parseInt";
  var peg$c24 = "parsefloat";
  var peg$c25 = "toString";
  var peg$c26 = "toLowerCase";
  var peg$c27 = "toUpperCase";
  var peg$c28 = "null";
  var peg$c29 = "typeof";
  var peg$c30 = "var";
  var peg$c31 = "true";
  var peg$c32 = "false";
  var peg$c33 = "for";
  var peg$c34 = "while";
  var peg$c35 = "System.out.println";
  var peg$c36 = "\"";
  var peg$c37 = "'";
  var peg$c38 = ".";
  var peg$c39 = "//";
  var peg$c40 = "\r\n";

  var peg$r0 = /^[<>]/;
  var peg$r1 = /^[+\-]/;
  var peg$r2 = /^[%*\/]/;
  var peg$r3 = /^[^"]/;
  var peg$r4 = /^[^"'"]/;
  var peg$r5 = /^[a-zA-Z]/;
  var peg$r6 = /^[0-9A-Z_a-z]/;
  var peg$r7 = /^[0-9]/;
  var peg$r8 = /^[\n\r]/;
  var peg$r9 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation(",", false);
  var peg$e1 = peg$literalExpectation("(", false);
  var peg$e2 = peg$literalExpectation(");", false);
  var peg$e3 = peg$literalExpectation("=", false);
  var peg$e4 = peg$literalExpectation(";", false);
  var peg$e5 = peg$literalExpectation(")", false);
  var peg$e6 = peg$literalExpectation("{", false);
  var peg$e7 = peg$literalExpectation("}", false);
  var peg$e8 = peg$literalExpectation("if", false);
  var peg$e9 = peg$literalExpectation("else", false);
  var peg$e10 = peg$literalExpectation("&&", false);
  var peg$e11 = peg$literalExpectation("||", false);
  var peg$e12 = peg$literalExpectation(">=", false);
  var peg$e13 = peg$literalExpectation("<=", false);
  var peg$e14 = peg$classExpectation(["<", ">"], false, false);
  var peg$e15 = peg$literalExpectation("==", false);
  var peg$e16 = peg$literalExpectation("!=", false);
  var peg$e17 = peg$classExpectation(["+", "-"], false, false);
  var peg$e18 = peg$classExpectation(["%", "*", "/"], false, false);
  var peg$e19 = peg$literalExpectation("-", false);
  var peg$e20 = peg$literalExpectation("int", false);
  var peg$e21 = peg$literalExpectation("float", false);
  var peg$e22 = peg$literalExpectation("string", false);
  var peg$e23 = peg$literalExpectation("boolean", false);
  var peg$e24 = peg$literalExpectation("char", false);
  var peg$e25 = peg$literalExpectation("!", false);
  var peg$e26 = peg$literalExpectation("parseInt", false);
  var peg$e27 = peg$literalExpectation("parsefloat", false);
  var peg$e28 = peg$literalExpectation("toString", false);
  var peg$e29 = peg$literalExpectation("toLowerCase", false);
  var peg$e30 = peg$literalExpectation("toUpperCase", false);
  var peg$e31 = peg$literalExpectation("null", false);
  var peg$e32 = peg$literalExpectation("typeof", false);
  var peg$e33 = peg$literalExpectation("var", false);
  var peg$e34 = peg$literalExpectation("true", false);
  var peg$e35 = peg$literalExpectation("false", false);
  var peg$e36 = peg$literalExpectation("for", false);
  var peg$e37 = peg$literalExpectation("while", false);
  var peg$e38 = peg$literalExpectation("System.out.println", false);
  var peg$e39 = peg$otherExpectation("string");
  var peg$e40 = peg$literalExpectation("\"", false);
  var peg$e41 = peg$classExpectation(["\""], true, false);
  var peg$e42 = peg$otherExpectation("char");
  var peg$e43 = peg$literalExpectation("'", false);
  var peg$e44 = peg$classExpectation(["\"", "'", "\""], true, false);
  var peg$e45 = peg$otherExpectation("identificador");
  var peg$e46 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e47 = peg$classExpectation([["0", "9"], ["A", "Z"], "_", ["a", "z"]], false, false);
  var peg$e48 = peg$otherExpectation("boolean");
  var peg$e49 = peg$otherExpectation("integer");
  var peg$e50 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e51 = peg$otherExpectation("float");
  var peg$e52 = peg$literalExpectation(".", false);
  var peg$e53 = peg$literalExpectation("//", false);
  var peg$e54 = peg$anyExpectation();
  var peg$e55 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e56 = peg$literalExpectation("\r\n", false);
  var peg$e57 = peg$otherExpectation("Whitespace");
  var peg$e58 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(expre) {
   const loc = location()?.start;
  return new Imprimir(loc?.line, loc?.column, expre);
};
  var peg$f1 = function(type, id, expr) {
    const loc = location()?.start;
    return new Declaracion(loc?.line, loc?.column, id, type, expr);
  };
  var peg$f2 = function(id, expr) {
    const loc = location()?.start;
    return new Declaracion(loc?.line, loc?.column, id, null, expr);
  };
  var peg$f3 = function(type, id) {
  const loc = location()?.start;
  return new Declaracion(loc?.line, loc?.column, id, type, null);
};
  var peg$f4 = function(id, expr) {
  const loc = location()?.start;
  return new Asignacion(loc?.line, loc?.column, id, expr);
};
  var peg$f5 = function(val) {
  const loc = location()?.start;
   let Wins= InsWhile;
   InsWhile=[];
  return new Mientras(loc?.line, loc?.column, val, Wins);
};
  var peg$f6 = function(ini, fin, paso) {
  const loc = location()?.start;
   let Fins= InsFor;
   InsFor=[];
  return new Para(loc?.line, loc?.column, ini, fin,paso, Fins);
};
  var peg$f7 = function(d) {return d;};
  var peg$f8 = function(a) {return a;};
  var peg$f9 = function(id, expr) {
  const loc = location()?.start;
  return new Asignacion(loc?.line, loc?.column, id, expr);
};
  var peg$f10 = function(type, id, params, inst) {
    const loc = location()?.start;
    let CInstr= InsFun;
    let CParm= ParamFun;
    InsFun=[];
    ParamFun=[];
    return new Funcion(type,id, loc?.line, loc?.column,CParm,CInstr);
  };
  var peg$f11 = function(type, id) {ParamFun.push(new Symbol(id,null,type));};
  var peg$f12 = function(ins) {InsFun.push(ins);};
  var peg$f13 = function(ins) {InsFun.push(ins);};
  var peg$f14 = function(ins) {InsFun.push(ins);};
  var peg$f15 = function(ins) {InsFun.push(ins);};
  var peg$f16 = function(ins) {InsFun.push(ins);};
  var peg$f17 = function(ins) {InsFor.push(ins);};
  var peg$f18 = function(ins) {InsFor.push(ins);};
  var peg$f19 = function(ins) {InsFor.push(ins);};
  var peg$f20 = function(ins) {InsFor.push(ins);};
  var peg$f21 = function(ins) {InsFun.push(ins);};
  var peg$f22 = function(ins) {InsWhile.push(ins);};
  var peg$f23 = function(ins) {InsWhile.push(ins);};
  var peg$f24 = function(ins) {InsWhile.push(ins);};
  var peg$f25 = function(ins) {InsWhile.push(ins);};
  var peg$f26 = function(ins) {InsFun.push(ins);};
  var peg$f27 = function(e) {return e;};
  var peg$f28 = function(e, op) {
    console.log("expresion logica");
    return op.reduce(function(result, element){
      const loc = location()?.start;
      if(element[1] === "&&") return new Logica(loc?.line, loc?.column, result, element[3], LOGICAL_OP.AND);
      else if(element[1] === "||") return new Logica(loc?.line, loc?.column, result, element[3], LOGICAL_OP.OR);
    }, e);
  };
  var peg$f29 = function(e) {
    const loc = location()?.start;
    return new Logica(loc?.line, loc?.column, null, e, LOGICAL_OP.NOT);
  };
  var peg$f30 = function(e) {
    return e;
  };
  var peg$f31 = function(e, op) {
    
    return op.reduce(function(result, element){
      const loc = location()?.start;
      if(element[1] === ">") return new Relacional(loc?.line,loc?.column, result, element[3], RELATIONAL_OP.MAYOR_QUE);
      else if(element[1] === "<") return new Relacional(loc?.line,loc?.column, result, element[3], RELATIONAL_OP.MENOR_QUE);
      else if(element[1] === ">=") return new Relacional(loc?.line,loc?.column, result, element[3], RELATIONAL_OP.MAYOR_IGUAL);
      else if(element[1] === "<=") return new Relacional(loc?.line,loc?.column, result, element[3], RELATIONAL_OP.MENOR_IGUAL);
      else if(element[1] === "==") return new Relacional(loc?.line,loc?.column, result, element[3], RELATIONAL_OP.IGUAL);
      else if(element[1] === "!=") return new Relacional(loc?.line,loc?.column, result, element[3], RELATIONAL_OP.NO_IGUAL);
    }, e);
  };
  var peg$f32 = function(head, tail) {
    console.log("expresion numerica");
    return tail.reduce(function(result, element) {
      const loc = location()?.start;
        if (element[1] === "+") { return new Aritmetica(loc?.line,loc?.column, result, element[3], ARITHMETIC_OP.MAS);  }
        if (element[1] === "-") { return new Aritmetica(loc?.line,loc?.column, result, element[3], ARITHMETIC_OP.MENOS); }
    }, head);
  };
  var peg$f33 = function(head, tail) {
    return tail.reduce(function(result, element) {
        const loc = location()?.start;
        if (element[1] === "*") { return new Aritmetica(loc?.line,loc?.column, result, element[3], ARITHMETIC_OP.MULTIPLICAR); }
        if (element[1] === "/") { return new Aritmetica(loc?.line,loc?.column, result, element[3], ARITHMETIC_OP.DIVIDIR); }
        if (element[1] === "%") { return new Aritmetica(loc?.line,loc?.column, result, element[3], ARITHMETIC_OP.MODULO); }
      }, head);
  };
  var peg$f34 = function(expr) { return expr;};
  var peg$f35 = function(exp) {
    const loc = location()?.start;
    return new Modificador(loc?.line,loc?.column,"ParseInt",exp);
  };
  var peg$f36 = function(exp) {
    const loc = location()?.start;
    return new Modificador(loc?.line,loc?.column,"ParseFloat",exp);
  };
  var peg$f37 = function(exp) {
    const loc = location()?.start;
    return new Modificador(loc?.line,loc?.column,"toString",exp);
  };
  var peg$f38 = function(exp) {
    const loc = location()?.start;
    return new Modificador(loc?.line,loc?.column,"toLower",exp);
  };
  var peg$f39 = function(exp) {
    const loc = location()?.start;
    return new Modificador(loc?.line,loc?.column,"toUpper",exp);
  };
  var peg$f40 = function(exp) {
    const loc = location()?.start;
    return new Modificador(loc?.line,loc?.column,"typeOf",exp);
  };
  var peg$f41 = function(expr) {
    const loc = location()?.start;
    return new Aritmetica(loc?.line, loc?.column, null, expr, ARITHMETIC_OP.MENOS);
  };
  var peg$f42 = function(valor) {
    const loc = location()?.start;
    return new Nativo(loc?.line, loc?.column, valor, Type.FLOAT);
  };
  var peg$f43 = function(valor) {
    const loc = location()?.start;
    return new Nativo(loc?.line, loc?.column, valor, Type.INT);
  };
  var peg$f44 = function(valor) {
    const loc = location()?.start;
    return new Nativo(loc?.line, loc?.column, valor, Type.CHAR);
  };
  var peg$f45 = function(valor) {
    const loc = location()?.start;
    return new Nativo(loc?.line, loc?.column, valor, Type.BOOLEAN);
  };
  var peg$f46 = function(valor) {
    const loc = location()?.start;
    return new Nativo(loc?.line, loc?.column, valor, Type.STRING);
  };
  var peg$f47 = function(valor) {
    const loc = location()?.start;
    return new Nativo(loc?.line, loc?.column, valor, Type.IDENTIFIER);
  };
  var peg$f48 = function() {return null;};
  var peg$f49 = function(type) {
    if(type[1] === "int") return Type.INT;
    else if(type[1] === "float") return Type.FLOAT;
    else if(type[1] === "string") return Type.STRING;
    else if(type[1] === "boolean") return Type.BOOLEAN;
    else if(type[1] === "char") return Type.CHAR;
    else if(type[1] === "void") return Type.VOID;
  };
  var peg$f50 = function(chars) {
    return text();
  };
  var peg$f51 = function() { return text(); };
  var peg$f52 = function() { return text(); };
  var peg$f53 = function() { return text(); };
  var peg$f54 = function() { return text(); };
  var peg$f55 = function() { return parseInt(text(), 10);};
  var peg$f56 = function() { return parseFloat(text());};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseS() {
    var s0;

    s0 = peg$parseinstrucciones();

    return s0;
  }

  function peg$parseinstrucciones() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccion();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccionesp();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruccionesp() {
    var s0;

    s0 = peg$parseinstrucciones();
    if (s0 === peg$FAILED) {
      s0 = peg$parseepsilon();
    }

    return s0;
  }

  function peg$parseinstruccion() {
    var s0;

    s0 = peg$parsedeclaracion();
    if (s0 === peg$FAILED) {
      s0 = peg$parseasignacion();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefuncion();
        if (s0 === peg$FAILED) {
          s0 = peg$parseimprimir();
        }
      }
    }

    return s0;
  }

  function peg$parseimprimibles() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseexpresion();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseimprimiblep();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseimprimiblep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseimprimibles();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = '';
    }

    return s0;
  }

  function peg$parseimprimir() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetokenImpr();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseexpresion();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c2) {
            s5 = peg$c2;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f0(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeclaracion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetipo();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseID();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s6 = peg$c3;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseexpresion();
          if (s7 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s8 = peg$c4;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f1(s2, s4, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsetokenVar();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseID();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s6 = peg$c3;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexpresion();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s8 = peg$c4;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f2(s4, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parsetipo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseID();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c4;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f3(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseasignacion() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseID();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s6 = peg$c4;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstruccionWhile() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parsetokenWhile();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c5;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s8 = peg$c6;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parseinstruccioneswhile();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s12 = peg$c7;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f5(s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstruccionFor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parsetokenFor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseinicioFor();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseexpresion();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s7 = peg$c4;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseasignacionPara();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s9 = peg$c5;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s11 = peg$c6;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parse_();
                    s13 = peg$parseinstruccionesfor();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s15 = peg$c7;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f6(s5, s6, s8);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinicioFor() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedeclaracion();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseasignacion();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseasignacionPara() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseID();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c3;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpresion();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f9(s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefuncion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetipo();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseID();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsef_params();
        if (s6 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s7 = peg$c6;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseinstruccionesf();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s11 = peg$c7;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f10(s2, s4, s6, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsef_params() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsel_params();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c5;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsel_params() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseparam();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsel_paramsp();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsel_paramsp() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsel_params();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesalidaRecursividad();
    }

    return s0;
  }

  function peg$parseparam() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsetipo();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseID();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesalidaRecursividad();
    }

    return s0;
  }

  function peg$parseinstruccionesf() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccionf();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccionesfp();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruccionesfp() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccionesf();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccionesfp();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesalidaRecursividad();
    }

    return s0;
  }

  function peg$parseinstruccionf() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedeclaracion();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseasignacion();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f13(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseinst_if();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseimprimir();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f14(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseInstruccionFor();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f15(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseInstruccionWhile();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f16(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinstruccionesfor() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccionfor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccionesforp();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruccionesforp() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccionfor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccionesforp();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesalidaRecursividad();
    }

    return s0;
  }

  function peg$parseinstruccionfor() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedeclaracion();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseasignacion();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f18(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseinst_if();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseimprimir();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f19(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseInstruccionFor();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f20(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseInstruccionWhile();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f21(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinstruccioneswhile() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccionwhile();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccioneswhilep();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruccioneswhilep() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseinstruccionwhile();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccioneswhilep();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesalidaRecursividad();
    }

    return s0;
  }

  function peg$parseinstruccionwhile() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedeclaracion();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseasignacion();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f23(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseinst_if();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseimprimir();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f24(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseInstruccionFor();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f25(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseInstruccionWhile();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f26(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinst_if() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpresion();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c5;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c6;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseinstruccionesf();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c7;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parser_if();
                  if (s8 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parser_if() {
    var s0;

    s0 = peg$parseb_else();
    if (s0 === peg$FAILED) {
      s0 = peg$parseepsilon();
    }

    return s0;
  }

  function peg$parseb_else() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseelse_if();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelse_if() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstruccionesf();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c7;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseinst_if();
    }

    return s0;
  }

  function peg$parseexpresion() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_logica();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseexpresion_logica() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_relacional();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c10) {
        s5 = peg$c10;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c11) {
          s5 = peg$c11;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpresion_relacional();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c10) {
          s5 = peg$c10;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c11) {
            s5 = peg$c11;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_relacional();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f28(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetokenNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpresion_relacional();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpresion_relacional();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f30(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseexpresion_relacional() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexpresion_numerica();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s5 = peg$c12;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c13) {
          s5 = peg$c13;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 === peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r0.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s5 = peg$c14;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e15); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c15) {
                s5 = peg$c15;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
            }
          }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpresion_numerica();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s5 = peg$c12;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c13) {
            s5 = peg$c13;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 === peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r0.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c14) {
                s5 = peg$c14;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c15) {
                  s5 = peg$c15;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion_numerica();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f31(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpresion_numerica();
    }

    return s0;
  }

  function peg$parseexpresion_numerica() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseTerm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseTerm();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseTerm();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTerm() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseFactor();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = input.charAt(peg$currPos);
      if (peg$r2.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseFactor();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r2.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseFactor();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f33(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFactor() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c1;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseexpresion_numerica();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c5;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsetokenParseInt();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseexpresion();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c5;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f35(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parsetokenParseFloat();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c1;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$parseexpresion();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s7 = peg$c5;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          s2 = peg$parsetokenToString();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseexpresion();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c5;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f37(s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            s2 = peg$parsetokenToLower();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c1;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseexpresion();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c5;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f38(s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              s2 = peg$parsetokenToUpper();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e1); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  s5 = peg$parseexpresion();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c5;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f39(s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                s2 = peg$parsetokenTypeOf();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  s4 = peg$parseterminal();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    peg$savedPos = s0;
                    s0 = peg$f40(s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseterminal();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s2 = peg$c16;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e19); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpresion_numerica();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f41(s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseterminal() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFLOAT();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseINTEGER();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f43(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHAR();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f44(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBOOLEAN();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f45(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSTRING();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f46(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseID();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f47(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsetokennull();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f48();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetipo() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c17) {
      s3 = peg$c17;
      peg$currPos += 3;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s3 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c18) {
        s3 = peg$c18;
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c19) {
          s3 = peg$c19;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c20) {
            s3 = peg$c20;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c21) {
              s3 = peg$c21;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseID();
            }
          }
        }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetokens() {
    var s0;

    s0 = peg$parsetokenNot();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetokenParseInt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetokenParseFloat();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetokenToString();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetokenToLower();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetokenToUpper();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetokenTypeOf();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetokenVar();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetokenT();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsetokenF();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsetokenFor();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsetokenImpr();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsetokenWhile();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsetokennull();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetokenNot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 33) {
      s2 = peg$c22;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenParseInt() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 8) === peg$c23) {
      s2 = peg$c23;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenParseFloat() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 10) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenToString() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 8) === peg$c25) {
      s2 = peg$c25;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenToLower() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 11) === peg$c26) {
      s2 = peg$c26;
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenToUpper() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 11) === peg$c27) {
      s2 = peg$c27;
      peg$currPos += 11;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokennull() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c28) {
      s2 = peg$c28;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenTypeOf() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6) === peg$c29) {
      s2 = peg$c29;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenVar() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c30) {
      s2 = peg$c30;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s2 = peg$c31;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenF() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c32) {
      s2 = peg$c32;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenFor() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c33) {
      s2 = peg$c33;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenWhile() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c34) {
      s2 = peg$c34;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetokenImpr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 18) === peg$c35) {
      s2 = peg$c35;
      peg$currPos += 18;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c36;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r3.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r3.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c36;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f50(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseCHAR() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c37;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r4.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s4 = peg$c37;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f51();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseID() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsetokens();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r5.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r6.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r6.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f52();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseBOOLEAN() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetokenT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f53();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsetokenF();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f54();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseINTEGER() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r7.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f55();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseFLOAT() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseINTEGER();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c38;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINTEGER();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseSimpleComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseEndComment();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseEndComment();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$parseEndComment();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEndComment() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r8.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c40) {
        s0 = peg$c40;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r9.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r9.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e57); }

    return s0;
  }

  function peg$parsesalidaRecursividad() {
    var s0;

    s0 = '';

    return s0;
  }

  function peg$parseepsilon() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  const ARITHMETIC_OP = {
    MAS: 0,
    MENOS: 1,
    MULTIPLICAR: 2,
    DIVIDIR: 3,
    MODULO: 4,
  };

  const MODIFICADOR_P ={
    PARSEINT: 5,
    PARSEFLOAT: 6,
  };

  const RELATIONAL_OP = {
    MENOR_QUE: 0,
    MENOR_IGUAL: 1,
    MAYOR_QUE: 2,
    MAYOR_IGUAL: 3,
    IGUAL: 4,
    NO_IGUAL: 5,
  };

  const LOGICAL_OP = {
    AND: 0,
    OR: 1,
    NOT: 2,
  };

  let InsFun= [];
  let InsFor=[];
  let InsWhile=[];
  let ParamFun=[];

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "S"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
